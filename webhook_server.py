import os
import json
import stripe
from flask import Flask, request, jsonify, render_template_string
from dotenv import load_dotenv

load_dotenv()

stripe.api_key = os.getenv("STRIPE_SECRET_KEY")
endpoint_secret = os.getenv("STRIPE_WEBHOOK_SECRET")

app = Flask(__name__)
SESSIONS_FILE = "paid_sessions.txt"

# üîí HTML-—à–∞–±–ª–æ–Ω –∫–∞—Å—Ç–æ–º–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã
THANKS_PAGE_TEMPLATE = """
<html>
  <head>
    <meta charset="utf-8">
    <title>–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–∞</title>
    <style>
      body {{ font-family: sans-serif; text-align: center; margin-top: 100px; }}
      .btn {{ background: #0088cc; color: white; padding: 12px 24px; border-radius: 6px; text-decoration: none; font-size: 18px; }}
    </style>
  </head>
  <body>
    <h1>‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É!</h1>
    <p>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å Telegram –∏ –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à –≥–∞–π–¥</p>
    <a class="btn" href="https://t.me/meta_course_bot?start={{session_id}}">–û—Ç–∫—Ä—ã—Ç—å Telegram</a>
  </body>
</html>
"""

# üîÑ –ö–∞—Å—Ç–æ–º–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏ (–µ—Å–ª–∏ session_id –ø–µ—Ä–µ–¥–∞–Ω —á–µ—Ä–µ–∑ ?session_id=...)
@app.route("/thanks")
def thanks():
    session_id = request.args.get("session_id", "")
    if not session_id:
        return "–û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç session_id", 400
    return render_template_string(THANKS_PAGE_TEMPLATE, session_id=session_id)

# üéØ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞: /success/<session_id> ‚Äî –∫—Ä–∞—Å–∏–≤–æ –∏ —á–∏—Ç–∞–µ–º–æ
@app.route("/success/<session_id>")
def success_page(session_id):
    return render_template_string(THANKS_PAGE_TEMPLATE, session_id=session_id)

# üíæ –ó–∞–ø–∏—Å—å session_id –≤ —Ñ–∞–π–ª
def save_session(session_id: str):
    with open(SESSIONS_FILE, "a") as f:
        f.write(session_id + "\n")

# üîÑ Webhook –æ—Ç Stripe
@app.route("/webhook", methods=["POST"])
def stripe_webhook():
    payload = request.data
    sig_header = request.headers.get("stripe-signature")

    try:
        event = stripe.Webhook.construct_event(payload, sig_header, endpoint_secret)
    except Exception as e:
        print("‚ùå Webhook error:", e)
        return jsonify(success=False), 400

    if event["type"] == "checkout.session.completed":
        session = event["data"]["object"]
        session_id = session["id"]
        save_session(session_id)
        print(f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞. –°–æ—Ö—Ä–∞–Ω—ë–Ω session_id: {session_id}")
    else:
        print(f"‚ÑπÔ∏è –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ {event['type']} (–Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è)")

    return jsonify(success=True), 200

# ‚úÖ –õ–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ ‚Äî –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
if __name__ == "__main__":
    app.run(port=5000)
